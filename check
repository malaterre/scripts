#!/usr/bin/env python3
""" check consistency """
import logging
import subprocess
import os
import sys
import argparse
import json
#import shutil
from bs4 import BeautifulSoup
from datetime import datetime


class FfmpegHelper(object):

    """
    """

    def __init__(self, input_file):
        self.logger = self._get_logger()
        self.input_file = input_file
        self.ffprobe_command = 'ffprobe'
        self.ffprobe_data = None

    def _grab_info(self):
        """ Inspect info of AVI file for basic check
        """
        filename, file_extension = os.path.splitext(self.input_file)
        self.nfo_file = filename + '.nfo'
        with open(self.nfo_file) as nfo_xml:
            self.nfo = BeautifulSoup(nfo_xml, 'lxml')
        command_line = [self.ffprobe_command, '-hide_banner', '-show_streams', '-show_chapters',
                        '-show_format', '-print_format', 'json', '-i', self.input_file]
        errcode, stdout, stderr = self.call_process(command_line, nolog=True)
        self.ffprobe_data = json.loads(stdout)
        self.logger.info(json.dumps(self.ffprobe_data, indent=4))
        title = self.nfo.title.string
        date = self.nfo.year.string

    def run(self):
        self._grab_info()

    def call_process(self, command_line_list, env=None, nolog=False, noerr=False):
        """ Thin wrapper over subprocess.call with logging functionality """
        self.logger.info(
            "Preparing to subprocess.call an external process with "
            "the following command line: \n%s",
            ' '.join('"{0}"'.format(w) for w in command_line_list))
        process = subprocess.Popen(command_line_list,
                                   stdin=subprocess.PIPE,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE,
                                   shell=False,
                                   env=env)
        stdout, stderr = process.communicate()
        if sys.version_info[0] >= 3:  # Python 3
            stdout = stdout.decode("utf-8")
            stderr = stderr.decode("utf-8")
        binary = os.path.basename(command_line_list[0])
        errcode = process.returncode
        if errcode and not noerr:
            self._raise_exception("Process %s exited with error code %d.\nThe process stdout is \n%s\nstderror is \n%s" % (
                binary, errcode, stdout, stderr))
        else:
            if not nolog and stderr != '':
                self.logger.info("The process stderr is \n%s", stderr)
        return errcode, stdout, stderr

    def _get_logger(self):
        """ return a correctly setup logger """
        logger = logging.getLogger('nfofix')
        logger.setLevel(logging.DEBUG)
        ch = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        ch.setLevel(logging.DEBUG)
        logger.addHandler(ch)
        return logger


def run(helper):
    logger = helper.logger
    helper.run()


def main(args):
    helper = FfmpegHelper(args.input)
    run(helper)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="ffmpeg + nfo")
    parser.add_argument("input", help='input movie')
    main(parser.parse_args())
